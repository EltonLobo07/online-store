ROUTE HTTP_METHOD
	INPUT
		Extra information (Optional)

	OUTPUT
		Extra information (Optional)

	NOTE (Optional)
----------------------------------------------------------------------------------------------------
CATEGORIES
----------------------------------------------------------------------------------------------------
/api/categories	GET
	{}

	[{name: "categoryName", id: "uniqueString"}, ...]
----------------------------------------------------------------------------------------------------
LOGIN
----------------------------------------------------------------------------------------------------
/api/login	POST
	{email: "example@gmail.com", password: "somePassword"}
		email    - Required
		password - Required

	{token: "JWTToken", id: "userId"}
		token - Contains user's email and id information and is signed using a secret key
----------------------------------------------------------------------------------------------------
USER
----------------------------------------------------------------------------------------------------
/api/users POST
	{email: "example@gmail.com", password: "somePassword"}
		email    - Required
		password - Required, should be at least 5 characters long

	{id: "userId", email: "example@gmail.com", shoppingCartProducts: {}}
----------------------------------------------------------------------------------------------------
/api/users/userId/shoppingCartProducts POST
	
	-Authorization header field: "Bearer TOKEN_RECEIVED_DURING_LOGIN"
	-{productId}
		productId - Required

	No output, only status code returned
		200 - If already present in the shopping cart
		201 - If added to the user's shopping cart
	
	The userId from the URL and the userId from the signed token should match
----------------------------------------------------------------------------------------------------
/api/users/userId/shoppingCartProducts GET

	Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"

	{"productId1": 12, ...}
----------------------------------------------------------------------------------------------------
/api/users/userId/shoppingCartProducts/ProductId DELETE

	Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"

	No output, only status code returned
		204 - If all the operations were performed successfully

	The userId from the URL and the userId from the signed token should match
----------------------------------------------------------------------------------------------------
/api/users/userId/shoppingCartProducts DELETE

	Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"

	No output, only status code returned
		204 - If all the operations were performed successfully

	-The userId from the URL and the userId from the signed token should match
	-This route is used to reset the shopping cart of the user
----------------------------------------------------------------------------------------------------
/api/users/userId/shoppingCartProducts/ProductId DELETE

	-Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"
	-{quantity: 12}
		-If quantity cannot be converted to an integer, operation is unsucessful
		-Math.max(Math.floor(quanity), 1) is used as quanity value to be stored in the database

	No output, only status code returned
		204 - If all the operations were performed successfully

	The userId from the URL and the userId from the signed token should match
----------------------------------------------------------------------------------------------------
PRODUCTS
----------------------------------------------------------------------------------------------------
/api/products POST
	
	-Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"
	-{
		category: "categoryName",

	 }
	 	category    - Required
		rating      - Optional, may contain 'rate' and 'count' fields
		title       - Required
		price       - Required
		description - Optional
		image       - Optional (Should be a URL if provided) 

	{
		title: "ProductTitle",
		category: "uniqueStringRepresentingCategoryId",
		price: 10000,
		description: "",
		image: "",
		rating: {
			rate: 0,
			count: 0
		},
		id: "uniqueStringRepresentingProductId"
	}

	-Only admin of the website (email === "admin@company.com") can use this route
	-The 'description', 'image', 'rating.rate', 'rating.count' default values are presented in 
	 the output section above
----------------------------------------------------------------------------------------------------
/api/products GET
	
	{}

	[
		{
			rating: {
				rate: 0,
				count: 0
			},
			title: "ProductTitle",
			price: 1000,
			description: "",
			category: {
				name: "categoryName",
				id: "uniqueStringRepresentingCategoryId"
			},
			image: "",
			id: "uniqueStringRepresentingProductId"
		}, 
		...
	]

	The 'description', 'image', 'rating.rate', 'rating.count' default values are presented in 
	 the output section above
----------------------------------------------------------------------------------------------------
/api/products/productId GET

	{}

	Same output as /api/products GET but only outputs matching product object 	
----------------------------------------------------------------------------------------------------
ORDERS
----------------------------------------------------------------------------------------------------
/api/orders POST

	-Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"
	-{
		order: [
			{item: "itemId", quantity: 1},
			...
		]
	 }
	 	item    - Required
		quanity - Required

	No output, only status code returned
		201 - If added to the user's shopping cart
----------------------------------------------------------------------------------------------------
/api/orders GET

	-Authorization header: "Bearer TOKEN_RECEIVED_DURING_LOGIN"
	-{}

	[
		{
			user: {
            email: "example@gmail.com",
            id: "userId"
        	},
        	items: [
				{
					item: {
						title: "productTitle",
						price: 1000,
						category: "categoryId",
						id: "itemId"
					},
					quantity: 12
				},
				...
        	],
        	date: "2022-08-10T08:52:04.514Z",
        	id: "orderId"
		},
		...
	]
